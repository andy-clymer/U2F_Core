using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace U2F.Core.Crypto
{
    public interface ICryptoService
    {
        /// <summary>
        /// Generated a securely generated byte array 
        /// </summary>
        /// <returns>Securely generated random bytes</returns>
        byte[] GenerateChallenge();
        
        /// <summary>
        /// Checks the signature.
        /// </summary>
        /// <param name="certificate">The certificate with a public key.</param>
        /// <param name="signedBytes">The signed data.</param>
        /// <param name="signature">The signature.</param>
        /// <returns></returns>
        bool CheckSignature(X509Certificate2 certificate, byte[] signedBytes, byte[] signature);


        /// <summary>
        /// Checks the signature.
        /// </summary>
        /// <param name="publicKey">The raw public key.</param>
        /// <param name="signedBytes">The signed data.</param>
        /// <param name="signature">The signature.</param>
        /// <returns></returns>
        bool CheckSignature(byte[] publicKey, byte[] signedBytes, byte[] signature);
        
        /// <summary>
        /// Hashes the specified bytes.
        /// </summary>
        /// <param name="bytes">The bytes.</param>
        /// <returns>byte array of hashed byte array</returns>
        byte[] Hash(byte[] bytes);

        /// <summary>
        /// Hashes the specified string with sha256.
        /// </summary>
        /// <param name="stringToHash">The string to be hased.</param>
        /// <returns>byte array of hashed string</returns>
        byte[] Hash(string stringToHash);
    }
}